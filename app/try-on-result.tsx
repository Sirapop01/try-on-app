// app/try-on-result.tsx
import React, { useEffect, useState } from "react";
import { View, Text, Image, ActivityIndicator } from "react-native";
import { useRouter } from "expo-router";
import * as FileSystem from "expo-file-system/legacy";
import * as MediaLibrary from "expo-media-library";
import { Screen, PrimaryBtn, GhostBtn } from "../components/ui";
import { useSelectionStore } from "../store/selectionStore";
import { useAuthState } from "../hooks/useAuth";
import { tryOn } from "../services/ml";
import { toDataUri } from "../services/image";
import { APP_CONFIG } from "../config/appConfig";
import { uploadBase64 as uploadToCloudinary } from "../services/providers/cloudinary";
import { addTryOnHistory } from "../services/history";

// ‚úÖ ‡πÉ‡∏ä‡πâ react-native-alert-notification ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Dialog ‡∏™‡∏ß‡∏¢ ‡πÜ
import { ALERT_TYPE, Dialog } from "react-native-alert-notification";

/**
 * ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏:
 * - ‡∏≠‡∏¢‡πà‡∏≤‡∏•‡∏∑‡∏°‡∏Ñ‡∏£‡∏≠‡∏ö root ‡∏Ç‡∏≠‡∏á‡πÅ‡∏≠‡∏õ‡∏î‡πâ‡∏ß‡∏¢ <AlertNotificationRoot> ... </AlertNotificationRoot>
 *   ‡πÉ‡∏ô App.tsx ‡∏´‡∏£‡∏∑‡∏≠ _layout.tsx
 */

export default function TryOnResult() {
    const router = useRouter();
    const { user } = useAuthState();
    const { person, garment } = useSelectionStore();

    const [loading, setLoading] = useState(true);
    const [resultB64, setResultB64] = useState<string | null>(null);
    const [elapsed, setElapsed] = useState(0);
    const [busy, setBusy] = useState<null | "app" | "device" | "cloud">(null);

    const hasCloudinary =
        !!(APP_CONFIG as any).CLOUDINARY_CLOUD_NAME &&
        !!(APP_CONFIG as any).CLOUDINARY_UPLOAD_PRESET;

    // ---------- helpers: dialog ----------
    const showSuccess = (title: string, textBody?: string, onPressButton?: () => void, buttonText = "‡∏ï‡∏Å‡∏•‡∏á") =>
        Dialog.show({
            type: ALERT_TYPE.SUCCESS,
            title,
            textBody,
            button: buttonText,
            onPressButton,
            autoClose: true,
            closeOnOverlayTap: true,
        });

    const showError = (title: string, textBody?: string, buttonText = "‡∏õ‡∏¥‡∏î") =>
        Dialog.show({
            type: ALERT_TYPE.DANGER,
            title,
            textBody,
            button: buttonText,
            autoClose: true,
            closeOnOverlayTap: true,
        });

    const showInfo = (title: string, textBody?: string, buttonText = "‡∏ï‡∏Å‡∏•‡∏á") =>
        Dialog.show({
            type: ALERT_TYPE.INFO,
            title,
            textBody,
            button: buttonText,
            autoClose: true,
            closeOnOverlayTap: true,
        });

    // timer ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏≠‡∏ú‡∏•
    useEffect(() => {
        let t: any;
        if (loading) {
            const start = Date.now();
            t = setInterval(() => setElapsed(Math.floor((Date.now() - start) / 1000)), 1000);
        }
        return () => clearInterval(t);
    }, [loading]);

    // ‡∏¢‡∏¥‡∏á BE ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û
    useEffect(() => {
        (async () => {
            try {
                if (!person?.base64 || (!garment?.base64 && !garment?.imageUrl)) {
                    showInfo("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏†‡∏≤‡∏û‡∏Ñ‡∏ô‡πÅ‡∏•‡∏∞/‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á", "‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö");
                    router.back();
                    return;
                }
                const { result_b64 } = await tryOn({
                    person_b64: person.base64,
                    garment_b64: garment.base64 ?? undefined,
                    garment_url: garment.imageUrl ?? undefined,
                    relax_validation: true,
                });
                setResultB64(result_b64);
            } catch (e: any) {
                console.error(e);
                showError("‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", e?.message ?? "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ö‡∏≤‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á");
            } finally {
                setLoading(false);
            }
        })();
    }, []);

    // ---------- fs helpers ----------
    const ensureWardrobeDir = async () => {
        const dir = `${(FileSystem as any).documentDirectory}wardrobe/`;
        try {
            await (FileSystem as any).makeDirectoryAsync(dir, { intermediates: true });
        } catch {}
        return dir;
    };

    // ‡πÄ‡∏ã‡∏ü‡∏™‡∏≥‡πÄ‡∏ô‡∏≤ ‚Äú‡πÉ‡∏ô‡πÅ‡∏≠‡∏õ‚Äù (‡πÄ‡∏™‡∏°‡∏≠‡πÉ‡∏ä‡πâ PNG)
    const saveAppCopy = async (b64: string) => {
        const dir = await ensureWardrobeDir();
        const localPath = `${dir}tryon_${Date.now()}.png`;
        await (FileSystem as any).writeAsStringAsync(localPath, b64, { encoding: "base64" });
        return localPath; // file:///.../document/wardrobe/xxx.png
    };

    // ‡∏•‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥ Firestore (‡∏ñ‡πâ‡∏≤ login)
    const upsertHistory = async (payload: { localUri: string; imageUrl?: string | null }) => {
        if (!user?.uid) return; // ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ login ‡∏Å‡πá‡∏Ç‡πâ‡∏≤‡∏°
        await addTryOnHistory(user.uid, {
            imageUrl: payload.imageUrl ?? null,
            localUri: payload.localUri,
            createdAt: Date.now(),
            garmentUrl: garment?.imageUrl ?? null,
            hasGarmentB64: !!garment?.base64,
        });
    };

    // ‡πÄ‡∏ã‡∏ü‡∏•‡∏á‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á (MediaLibrary ‚Üí fallback SAF)
    const saveToDeviceOnly = async (b64: string) => {
        try {
            let perm = await MediaLibrary.getPermissionsAsync();
            if (!perm.granted) perm = await MediaLibrary.requestPermissionsAsync();
            if (!perm.granted) throw new Error("MediaLibDenied");

            const fname = `tryon_${Date.now()}.png`;
            const tmp = `${(FileSystem as any).cacheDirectory}${fname}`;
            await (FileSystem as any).writeAsStringAsync(tmp, b64, { encoding: "base64" });
            await MediaLibrary.saveToLibraryAsync(tmp);
            try {
                await (FileSystem as any).deleteAsync(tmp, { idempotent: true });
            } catch {}
            return true;
        } catch (e: any) {
            const msg = String(e?.message || e);
            if (!/AUDIO|MediaLibDenied/i.test(msg)) throw e;
            // SAF
            const saf = await (FileSystem as any).StorageAccessFramework.requestDirectoryPermissionsAsync();
            if (!saf.granted) return false;
            const fname = `tryon_${Date.now()}.png`;
            const uri = await (FileSystem as any).StorageAccessFramework.createFileAsync(
                saf.directoryUri,
                fname,
                "image/png"
            );
            await (FileSystem as any).writeAsStringAsync(uri, b64, { encoding: "base64" });
            return true;
        }
    };

    // ---------- actions: ‡πÅ‡∏¢‡∏Å‡∏õ‡∏∏‡πà‡∏° ----------
    // 1) Save in App (‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î‡πÄ‡∏ô‡πá‡∏ï ‡πÑ‡∏°‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î ‡πÑ‡∏°‡πà‡∏•‡∏á‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á)
    const onSaveInApp = async () => {
        try {
            if (!resultB64) return;
            setBusy("app");
            const localUri = await saveAppCopy(resultB64);
            await upsertHistory({ localUri });

            showSuccess("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", "‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ‡πÉ‡∏ô‡πÅ‡∏≠‡∏õ‡πÅ‡∏•‡πâ‡∏ß üéâ");
        } catch (e: any) {
            showError("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", e?.message ?? "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å");
        } finally {
            setBusy(null);
        }
    };

    // 2) Save to Device (‡∏à‡∏∞ ‚Äú‡πÄ‡∏ã‡∏ü‡πÉ‡∏ô‡πÅ‡∏≠‡∏õ‚Äù ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏î‡πâ‡∏ß‡∏¢)
    const onSaveToDevice = async () => {
        try {
            if (!resultB64) return;
            setBusy("device");
            // save in app
            const localUri = await saveAppCopy(resultB64);
            await upsertHistory({ localUri });
            // save to device
            await saveToDeviceOnly(resultB64);

            // ‡∏õ‡∏∏‡πà‡∏° = ‡∏î‡∏π‡πÉ‡∏ô Wardrobe, ‡∏ñ‡πâ‡∏≤‡∏õ‡∏¥‡∏î‡∏ö‡∏ô overlay ‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏ô‡πâ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏ï‡πà‡∏≠
            showSuccess(
                "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
                "‡∏†‡∏≤‡∏û‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ó‡∏±‡πâ‡∏á‡πÉ‡∏ô‡πÅ‡∏≠‡∏õ‡πÅ‡∏•‡∏∞‡πÉ‡∏ô‡∏≠‡∏±‡∏•‡∏ö‡∏±‡πâ‡∏°‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß üéâ",
                () => router.push("/(tabs)/wardrobe"),
                "‡∏î‡∏π‡πÉ‡∏ô Wardrobe"
            );
        } catch (e: any) {
            showError("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", e?.message ?? "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å");
        } finally {
            setBusy(null);
        }
    };

    // 3) Upload to Cloud (‡πÅ‡∏¢‡∏Å‡∏õ‡∏∏‡πà‡∏°‚Äî‡∏≠‡∏±‡∏õ Cloudinary + ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Firestore) ‚Äî ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏°‡∏µ config
    const onUploadCloud = async () => {
        try {
            if (!resultB64) return;
            if (!hasCloudinary) {
                return showInfo("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Cloud", "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Cloudinary ‡πÉ‡∏ô‡πÅ‡∏≠‡∏õ");
            }
            setBusy("cloud");
            // ensure ‡∏°‡∏µ entry ‡πÉ‡∏ô‡πÅ‡∏≠‡∏õ‡∏î‡πâ‡∏ß‡∏¢
            const localUri = await saveAppCopy(resultB64);
            // upload
            const cloud = await uploadToCloudinary(resultB64, "tryon");
            const imageUrl = (cloud as any).secure_url || (cloud as any).url;
            if (!imageUrl) throw new Error("Cloudinary ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏™‡πà‡∏á secure_url ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤");
            // update history
            await upsertHistory({ localUri, imageUrl });

            showSuccess("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", "‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡∏∂‡πâ‡∏ô Cloud ‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢");
        } catch (e: any) {
            showError("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", e?.message ?? "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î");
        } finally {
            setBusy(null);
        }
    };

    const goBack = () => router.replace("/(tabs)/try-on");

    return (
        <Screen>
            <View style={{ flex: 1, alignItems: "center", justifyContent: "center", padding: 20 }}>
                {loading ? (
                    <>
                        <ActivityIndicator size="large" />
                        <Text style={{ marginTop: 20, fontSize: 16 }}>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û... {elapsed}s</Text>
                    </>
                ) : resultB64 ? (
                    <>
                        <Text style={{ fontWeight: "bold", fontSize: 18, marginBottom: 10 }}>‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå</Text>
                        <Image
                            source={{ uri: toDataUri(resultB64) }}
                            style={{
                                width: "100%",
                                height: 420,
                                borderRadius: 16,
                                marginBottom: 16,
                                backgroundColor: "#eee",
                            }}
                            resizeMode="contain"
                        />

                        {/* ‡∏õ‡∏∏‡πà‡∏°‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ */}
                        <PrimaryBtn
                            title={busy === "app" ? "Saving..." : "Save in App"}
                            onPress={onSaveInApp}
                            disabled={!!busy}
                            style={{ width: "100%", marginBottom: 10 }}
                        />
                        <PrimaryBtn
                            title={busy === "device" ? "Saving..." : "Save to Device (also save in App)"}
                            onPress={onSaveToDevice}
                            disabled={!!busy}
                            style={{ width: "100%", marginBottom: 10 }}
                        />
                        {hasCloudinary && (
                            <PrimaryBtn
                                title={busy === "cloud" ? "Uploading..." : "Upload to Cloud (Cloudinary)"}
                                onPress={onUploadCloud}
                                disabled={!!busy}
                                style={{ width: "100%", marginBottom: 10 }}
                            />
                        )}
                        {!hasCloudinary && (
                            <Text style={{ color: "#6B7280", fontSize: 12, marginBottom: 8 }}>
                                Cloud upload is disabled (missing Cloudinary config).
                            </Text>
                        )}

                        <GhostBtn title="Cancel" onPress={goBack} style={{ marginTop: 6, width: "100%" }} />
                    </>
                ) : (
                    <>
                        <Text style={{ color: "red" }}>No result</Text>
                        <GhostBtn title="Back" onPress={goBack} />
                    </>
                )}
            </View>
        </Screen>
    );
}
